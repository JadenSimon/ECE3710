.menu_loop
      // this checks if the 'A' button is pressed then jumps to .game_setup if so, loops back if not
      MOVI REG0 0000111100000111
      MOVI REG1 00000000
      STOR REG1 REG0
      MOVI REG3 0000000010000000
      LCI REG0 player1
      LCI REG1 player2
      AND REG1 REG3
      AND REG0 REG3
      MOVI REG4 .game_setup
      CMPI REG0 00000000
      JCND EQ REG4
      CMPI REG1 00000000
      JCND EQ REG4
      MOVI REG4 .menu_loop
      JCND NC REG4

.game_setup
      // set the initial tank location for player 1
      MOVI REG0 0000111100001111
      MOVI REG1 0000111100001110
      MOVI REG2 0000000001000000
      MOVI REG3 0000000001000000
      STOR REG2 REG0
      STOR REG3 REG1
      // set the initial tank location for player 2
      MOVI REG0 0000111100001101
      MOVI REG1 0000111100001100
      MOVI REG2 0000001000111111
      MOVI REG3 0000000110011111
      STOR REG2 REG0
      STOR REG3 REG1
      // set the initial tank health for player 1
      MOVI REG0 0000111001110100
      MOVI REG1 00000011
      STOR REG1 REG0
      // set the initial tank health for player 2
      MOVI REG0 0000111001110011
      MOVI REG1 00000011
      STOR REG1 REG0
      // set the initial orientation for player 1
      MOVI REG0 0000111001110010
      MOVI REG1 00000001
      STOR REG1 REG0
      // set the initial orientation for player 2
      MOVI REG0 0000111001110001
      MOVI REG1 00000011
      STOR REG1 REG0
      // set the game state to one to tell the vga to draw the map
      MOVI REG0 0000111100000111
      MOVI REG1 00000001
      STOR REG1 REG0
      MOVI REG4 .game_loop_player1
      JCND NC REG4

.game_loop_player1
      // load snes input
      LCI REG0 player1
      MOV REG2 REG0
      // if its a move UP: jump to update_tank_location_up
      MOVI REG1 0000100000000000
      AND REG2 REG1
      MOVI REG3 .update_tank_location_up_player1
      CMP REG2 REG1
      JCND EQ REG3
      // if its a move DOWN: jump to update_tank_location_down
      MOV REG2 REG0
      MOVI REG1 0000010000000000
      AND REG2 REG1
      MOVI REG3 .update_tank_location_down_player1
      CMP REG2 REG1
      JCND EQ REG3
      // if its a move LEFT: jump to update_tank_location_left
      MOV REG2 REG0
      MOVI REG1 0000001000000000
      AND REG2 REG1
      MOVI REG3 .update_tank_location_left_player1
      CMP REG2 REG1
      JCND EQ REG3
      // if its a move RIGHT: jump to update_tank_location_right
      MOV REG2 REG0
      MOVI REG1 0000000100000000
      AND REG2 REG1
      MOVI REG3 .update_tank_location_right_player1
      CMP REG2 REG1
      JCND EQ REG3
.check_shoot_player1
      // if its a shoot: jump to spawn_projectile
      MOV REG2 REG0
      MOVI REG1 0000000010000000
      AND REG2 REG1
      MOVI REG3 .spawn_projectile_player1
      CMP REG2 REG1
      JCND EQ REG3
      MOVI REG3 .update_projectiles_player1
      JCND NC REG3

.game_loop_player2
      // load snes input
      LCI REG0 player2
      MOV REG2 REG0
      // if its a move UP: jump to update_tank_location_up
      MOVI REG1 0000100000000000
      AND REG2 REG1
      MOVI REG3 .update_tank_location_up_player2
      CMP REG2 REG1
      JCND EQ REG3
      // if its a move DOWN: jump to update_tank_location_down
      MOV REG2 REG0
      MOVI REG1 0000010000000000
      AND REG2 REG1
      MOVI REG3 .update_tank_location_down_player2
      CMP REG2 REG1
      JCND EQ REG3
      // if its a move LEFT: jump to update_tank_location_left
      MOV REG2 REG0
      MOVI REG1 0000001000000000
      AND REG2 REG1
      MOVI REG3 .update_tank_location_left_player2
      CMP REG2 REG1
      JCND EQ REG3
      // if its a move RIGHT: jump to update_tank_location_right
      MOV REG2 REG0
      MOVI REG1 0000000100000000
      AND REG2 REG1
      MOVI REG3 .update_tank_location_right_player2
      CMP REG2 REG1
      JCND EQ REG3
.check_shoot_player2
      // if its a shoot: jump to spawn_projectile
      MOV REG2 REG0
      MOVI REG1 0000000010000000
      AND REG2 REG1
      MOVI REG3 .spawn_projectile_player2
      CMP REG2 REG1
      JCND EQ REG3
      MOVI REG3 .update_projectiles_player2
      JCND NC REG3

.update_projectiles_player1
      // load projectile x coord, y coord, and orientation
      MOVI REG6 0000111100001011
      LOAD REG0 REG6
      MOVI REG7 0000111100001010
      LOAD REG1 REG7
      MOVI REG8 0000111001110000
      LOAD REG2 REG8
      // if they are not active then just jump to next game loop
      MOVI REG3 .game_loop_player2
      CMPI REG0 00000000
      JCND EQ REG3
      // calculate the offset
      MOVI REG3 .move_proj1_up
      CMPI REG2 00000000
      JCND EQ REG3
      MOVI REG3 .move_proj1_down
      CMPI REG2 00000010
      JCND EQ REG3
      MOVI REG3 .move_proj1_left
      CMPI REG2 00000011
      JCND EQ REG3
      MOVI REG3 .move_proj1_right
      CMPI REG2 00000001
      JCND EQ REG3
.move_proj1_up
      SUBI REG1 00000001
      MOVI REG3 .check_proj1_collision
      JCND NC REG3
.move_proj1_down
      ADDI REG1 00000001
      MOVI REG3 .check_proj1_collision
      JCND NC REG3
.move_proj1_left
      SUBI REG0 00000001
      MOVI REG3 .check_proj1_collision
      JCND NC REG3
.move_proj1_right
      ADDI REG0 00000001
      MOVI REG3 .check_proj1_collision
      JCND NC REG3
.check_proj1_collision
      STOR REG0 REG6
      STOR REG1 REG7
      STOR REG2 REG8
      MOVI REG3 .game_loop_player2
      JCND NC REG3
      // check the collision of the projectiles. If there is a no collision, store
      // the new position in memory. If there is a collision with a wall,
      // then don't store the updated position in memory, just mark it invalid. If there
      // is a collision with a tank then don't store the updated position in memory,
      // just mark it invalid then jump to update health of tank.

.update_projectiles_player2
      // load projectile x coord, y coord, and orientation
      MOVI REG6 0000111100001001
      LOAD REG0 REG6
      MOVI REG7 0000111100001000
      LOAD REG1 REG7
      MOVI REG8 0000111001101111
      LOAD REG2 REG8
      // if they are not active then just jump to next game loop
      MOVI REG3 .game_loop_player1
      CMPI REG0 00000000
      JCND EQ REG3
      // calculate the offset
      MOVI REG3 .move_proj2_up
      CMPI REG2 00000000
      JCND EQ REG3
      MOVI REG3 .move_proj2_down
      CMPI REG2 00000010
      JCND EQ REG3
      MOVI REG3 .move_proj2_left
      CMPI REG2 00000011
      JCND EQ REG3
      MOVI REG3 .move_proj2_right
      CMPI REG2 00000001
      JCND EQ REG3
.move_proj2_up
      SUBI REG1 00000001
      MOVI REG3 .check_proj2_collision
      JCND NC REG3
.move_proj2_down
      ADDI REG1 00000001
      MOVI REG3 .check_proj2_collision
      JCND NC REG3
.move_proj2_left
      SUBI REG0 00000001
      MOVI REG3 .check_proj2_collision
      JCND NC REG3
.move_proj2_right
      ADDI REG0 00000001
      MOVI REG3 .check_proj2_collision
      JCND NC REG3
.check_proj2_collision
      STOR REG0 REG6
      STOR REG1 REG7
      STOR REG2 REG8
      MOVI REG0 0000000000000000
      MOVI REG1 1111111111111111
      // this is nops so we can control the frame rate
.wait_loop
      ADDI REG0 00000001
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      ADDI REG2 00000000
      CMPI REG0 REG1
      JCND NE .wait_loop
      MOVI REG3 .game_loop_player1
      JCND NC REG3
      // check the collision of the projectiles. If there is a no collision, store
      // the new position in memory. If there is a collision with a wall,
      // then don't store the updated position in memory, just mark it invalid. If there
      // is a collision with a tank then don't store the updated position in memory,
      // just mark it invalid then jump to update health of tank.

.update_tank_location_right_player1
      // move the address of the player1 loc to saved register
      MOVI REG6 0000111100001111
      LOAD REG8 REG6
      MOVI REG7 0000111100001110
      LOAD REG9 REG7
      MOVI REG10 0000111001110010
      MOVI REG11 00000001
      ADDI REG8 00000001
      // TODO: Check for collision with new coordinates
      STOR REG8 REG6
      STOR REG11 REG10
      MOVI REG4 .check_shoot_player1
      JCND NC REG4

.update_tank_location_left_player1
      // move the address of the player1 loc to saved register
      MOVI REG6 0000111100001111
      LOAD REG8 REG6
      MOVI REG7 0000111100001110
      LOAD REG9 REG7
      MOVI REG10 0000111001110010
      MOVI REG11 00000011
      SUBI REG8 00000001
      // TODO: Check for collision with new coordinates
      STOR REG8 REG6
      STOR REG11 REG10
      MOVI REG4 .check_shoot_player1
      JCND NC REG4

.update_tank_location_up_player1
      // move the address of the player1 loc to saved register
      MOVI REG6 0000111100001111
      LOAD REG8 REG6
      MOVI REG7 0000111100001110
      LOAD REG9 REG7
      MOVI REG10 0000111001110010
      MOVI REG11 00000000
      ADDI REG9 00000001
      // TODO: Check for collision with new coordinates
      STOR REG9 REG7
      STOR REG11 REG10
      MOVI REG4 .check_shoot_player1
      JCND NC REG4

.update_tank_location_down_player1
      // move the address of the player1 loc to saved register
      MOVI REG6 0000111100001111
      LOAD REG8 REG6
      MOVI REG7 0000111100001110
      LOAD REG9 REG7
      MOVI REG10 0000111001110010
      MOVI REG11 00000010
      SUBI REG9 00000001
      // TODO: Check for collision with new coordinates
      STOR REG9 REG7
      STOR REG11 REG10
      MOVI REG4 .check_shoot_player1
      JCND NC REG4

.update_tank_location_right_player2
      // move the address of the player2 loc to saved register
      MOVI REG6 0000111100001101
      LOAD REG8 REG6
      MOVI REG7 0000111100001100
      LOAD REG9 REG7
      MOVI REG10 0000111001110001
      MOVI REG11 00000001
      ADDI REG8 00000001
      // TODO: Check for collision with new coordinates
      STOR REG8 REG6
      STOR REG11 REG10
      MOVI REG4 .check_shoot_player2
      JCND NC REG4

.update_tank_location_left_player2
      // move the address of the player2 loc to saved register
      MOVI REG6 0000111100001101
      LOAD REG8 REG6
      MOVI REG7 0000111100001100
      LOAD REG9 REG7
      MOVI REG10 0000111001110001
      MOVI REG11 00000011
      SUBI REG8 00000001
      // TODO: Check for collision with new coordinates
      STOR REG8 REG6
      STOR REG11 REG10
      MOVI REG4 .check_shoot_player2
      JCND NC REG4

.update_tank_location_up_player2
      // move the address of the player2 loc to saved register
      MOVI REG6 0000111100001101
      LOAD REG8 REG6
      MOVI REG7 0000111100001100
      LOAD REG9 REG7
      MOVI REG10 0000111001110001
      MOVI REG11 00000000
      ADDI REG9 00000001
      // TODO: Check for collision with new coordinates
      STOR REG9 REG7
      STOR REG11 REG10
      MOVI REG4 .check_shoot_player2
      JCND NC REG4

.update_tank_location_down_player2
      // move the address of the player2 loc to saved register
      MOVI REG6 0000111100001101
      LOAD REG8 REG6
      MOVI REG7 0000111100001100
      LOAD REG9 REG7
      MOVI REG10 0000111001110001
      MOVI REG11 00000010
      SUBI REG9 00000001
      // TODO: Check for collision with new coordinates
      STOR REG9 REG7
      STOR REG11 REG10
      MOVI REG4 .check_shoot_player2
      JCND NC REG4

.spawn_projectile_player1
      MOVI REG0 0000111100001011
      MOVI REG1 0000111100001010
      MOVI REG5 0000111001110010
      MOVI REG2 0000111100001111
      MOVI REG3 0000111100001110
      MOVI REG6 0000111001110000
      LOAD REG0 REG0
      LOAD REG1 REG1
      LOAD REG5 REG5
      // calculate the offset
      MOVI REG7 .spawn_proj1_up
      CMPI REG5 00000000
      JCND EQ REG7
      MOVI REG7 .spawn_proj1_down
      CMPI REG5 00000010
      JCND EQ REG7
      MOVI REG7 .spawn_proj1_left
      CMPI REG5 00000011
      JCND EQ REG7
      MOVI REG7 .spawn_proj1_right
      CMPI REG5 00000001
      JCND EQ REG7
.spawn_proj1_up
      SUBI REG1 00010000
      STOR REG0 REG2
      STOR REG1 REG3
      STOR REG5 REG6
      MOVI REG4 .update_projectiles_player1
      JCND NC REG3
.spawn_proj1_down
      ADDI REG1 00010000
      STOR REG0 REG2
      STOR REG1 REG3
      STOR REG5 REG6
      MOVI REG4 .update_projectiles_player1
      JCND NC REG3
.spawn_proj1_left
      SUBI REG0 00010000
      STOR REG0 REG2
      STOR REG1 REG3
      STOR REG5 REG6
      MOVI REG4 .update_projectiles_player1
      JCND NC REG3
.spawn_proj1_right
      ADDI REG0 00010000
      STOR REG0 REG2
      STOR REG1 REG3
      STOR REG5 REG6
      MOVI REG4 .update_projectiles_player1
      JCND NC REG3

.spawn_projectile_player2
      MOVI REG0 0000111100001001
      MOVI REG1 0000111100001000
      MOVI REG5 0000111001110001
      MOVI REG2 0000111100001101
      MOVI REG3 0000111100001100
      MOVI REG6 0000111001101111
      LOAD REG0 REG0
      LOAD REG1 REG1
      LOAD REG5 REG5
      // calculate the offset
      MOVI REG7 .spawn_proj2_up
      CMPI REG5 00000000
      JCND EQ REG7
      MOVI REG7 .spawn_proj2_down
      CMPI REG5 00000010
      JCND EQ REG7
      MOVI REG7 .spawn_proj2_left
      CMPI REG5 00000011
      JCND EQ REG7
      MOVI REG7 .spawn_proj2_right
      CMPI REG5 00000001
      JCND EQ REG7
.spawn_proj2_up
      SUBI REG1 00010000
      STOR REG0 REG2
      STOR REG1 REG3
      STOR REG5 REG6
      MOVI REG4 .update_projectiles_player2
      JCND NC REG3
.spawn_proj2_down
      ADDI REG1 00010000
      STOR REG0 REG2
      STOR REG1 REG3
      STOR REG5 REG6
      MOVI REG4 .update_projectiles_player2
      JCND NC REG3
.spawn_proj2_left
      SUBI REG0 00010000
      STOR REG0 REG2
      STOR REG1 REG3
      STOR REG5 REG6
      MOVI REG4 .update_projectiles_player2
      JCND NC REG3
.spawn_proj2_right
      ADDI REG0 00010000
      STOR REG0 REG2
      STOR REG1 REG3
      STOR REG5 REG6
      MOVI REG4 .update_projectiles_player2
      JCND NC REG3
